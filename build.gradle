
//Settings
ext {
    project_group = 'com.github.huntersherms'
    project_version = '0.0.3'
    project_jdk = '1.8'
    project_pom = {
        name 'Pojo2Parquet'
        packaging 'jar'
        description "A simple utility for converting pojo to parquet files and back out."
        url 'https://github.com/HunterSherms'

        scm {
            url 'scm:git@github.com:HunterSherms/Pojo2Parquet.git'
            connection 'scm:git@github.com:HunterSherms/Pojo2Parquet.git'
            developerConnection 'scm:git@github.com:HunterSherms/Pojo2Parquet.git'
        }

        licenses {
            license {
                name 'MIT License'
                url 'https://opensource.org/licenses/MIT'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'HunterSherms'
                name 'Hunter Sherman'
            }
        }
    }
}

//Identifiers
group = project_group
version = project_version
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

buildscript {
    ext.kotlin_version = '1.1.4-3'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

//Plugins
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'signing'

//Dependencies
repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.apache.parquet:parquet-avro:1.9.0"
    compile "org.apache.hadoop:hadoop-client:2.8.1"

    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-avro:2.9.0"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

//Artifacts
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

if(isReleaseVersion && gradle.startParameter.taskNames.contains("uploadArchives")) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project project_pom
        }
    }
}
